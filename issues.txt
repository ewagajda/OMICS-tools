The main issue with both PANR and SANTA packages is that they are not dispalying plots/boxplots/graphs. 

For boxplots/plots R create a file in working directory called "Rplots.pdf" but I don't know what's inside because I can't open this file. I don't know what program HPC are using to open .pdf files.
So, I can't tell right now how R constructs this file, if there is a couple of boxplots/plots or if there is only one (the last called and created).

Furthermore, if boxplot/plot is created for the first time after starting R and "Rplots.pdf" file does not yet exist in working directory everyting works fine. Boxplots/plots are created and stored in Rplots.pdf file although as I said before I'm not sure what's exactly in this file. But there is no error or warrning message that plot/boxplot can't be created so I think it is created. 
However, if you quit R and then start it again and there is already Rplots.pdf file in working directory boxplots/plots won't be created and this error message will be shown:

Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'

My solution to this problem is to make Rplots.pdf file dissapear from working directory either by renaming it, moving it elsewhere or deleting it. If it won't be done then above error message will appear. But if R can't find Rplots.pdf file in working directory then it will create one witohout problems when asked to make some boxplot or plot. 


These are the commands that could cause above error message to appear:

in PANR:
1.
> view(bm1, "fitNULL")
2.
> view(bm1, "fitBM")


in SANTA:
1.
boxplot(-log10(pvalues), xlab="cutoff", ylab="-log10(p-value)")

2.
> par(mfrow=c(1,2))

3.
> plot(g)

4.
> p.values <- array(unlist(results), dim=c(length(go.terms), 
       length(network.names)), dimnames=list(go.terms, 
       network.names))
 p.values.ml10 <- -log10(p.values)
 axis.range <- c(0, max(p.values.ml10)) 
 plot(p.values.ml10[, "raw"], p.values.ml10[, "cor"], asp=1, 
       xlim=axis.range, ylim=axis.range, bty="l", 
       xlab="-log10 of the p-value in the raw GI network", 
       ylab="-log10 of the p-value in the correlation network", 
       main="")
5.
>  abline(0, 1, col="red")

6.
> plot(results$treated)

7.
> plot(results$untreated)



Other issues that I came across while testing PANR and SANTA packages are:

in PANR:
1.
  > library(RedeR)
***This is RedeR 1.18.0! For a quick start, please type 'vignette('RedeR')'.
   Supporting information is available at Genome Biology 13:R29, 2012,
   (doi:10.1186/gb-2012-13-4-r29).
> viewPAN(pan, what="graph")
................................................................................

The Java interface is not responding to initialization!
Please, check whether Java is already installed in your machine (JRE version>=6).
For a general diagnosis, re-run the 'calld' function with 'checkcalls=TRUE', for example: > calld(rdp, checkcalls=TRUE)
Please report any eventual error message to us <mauro.a.castro at gmail.com>



2.
> library(pvclust)
> library(snow)
> options(cluster=makeCluster(4, "SOCK"))
> pan<-pvclustModule(pan, nboot=1000, metric="cosine", hclustMethod="average", filter=TRUE, verbose=TRUE, r=c(5:12/7))
-Searching enriched functional gene modules using clustering with bootstrap resampling
Multiscale bootstrap... Done.
Warning message:
In pvclust::parPvclust(getOption("cluster"), t(fPheno), method.hclust = hclustMethod,  :
  "parPvclust" has been integrated into pvclust (with "parallel" option).
It is available for back compatibility but will be unavailable in the future.



3.
> viewPAN(pan,what="pvclustModule", moduleID=inds)
................................................................................

The Java interface is not responding to initialization!
Please, check whether Java is already installed in your machine (JRE version>=6).
For a general diagnosis, re-run the 'calld' function with 'checkcalls=TRUE', for example:
> calld(rdp, checkcalls=TRUE)
Please report any eventual error message to us <mauro.a.castro at gmail.com>
There were 50 or more warnings (use warnings() to see the first 50)
> warnings()
Warning messages:
1: In .Call("R_igraph_subgraph", graph, as.igraph.vs(graph,  ... :
  At structural_properties.c:1945 :igraph_subgraph is deprecated from igraph 0.6, use igraph_induced_subgraph instea
2: In .Call("R_igraph_subgraph", graph, as.igraph.vs(graph,  ... :
  At structural_properties.c:1945 :igraph_subgraph is deprecated from igraph 0.6, use igraph_induced_subgraph instea

(there is about 50 of this warning messages)


4.
> viewNestedModules(pan,pValCutoff=0.05,minSize=3,maxSize=100)
................................................................................

The Java interface is not responding to initialization!
Please, check whether Java is already installed in your machine (JRE version>=6).
For a general diagnosis, re-run the 'calld' function with 'checkcalls=TRUE', for example:
> calld(rdp, checkcalls=TRUE)
Please report any eventual error message to us <mauro.a.castro at gmail.com>



in SANTA:
1.
# load igraph objects
> data(g.costanzo.raw)
> data(g.costanzo.cor)
> networks <- list(raw=g.costanzo.raw, cor=g.costanzo.cor)
> network.names <- names(networks)
> network.genes <- V(networks$raw)$name
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...


2.
> xx <- as.list(org.Sc.sgdGO2ALLORFS)
> go.terms <- c("GO:0000082", "GO:0003682", "GO:0007265",
+               "GO:0040008", "GO:0090329")

# apply the GO terms to the networks
> for (name in network.names) {
+     for (go.term in go.terms) {
+         networks[[name]] <- set.vertex.attribute(
+             networks[[name]], name=go.term,
+             value=as.numeric(network.genes %in% xx[[go.term]]))
+     }
+ }
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above message appeared 30 times here


3.
> for (name in network.names) {
	results[[name]] <- Knet(networks[[name]], nperm=1000, 
         vertex.attr=go.terms, edge.attr="distance", verbose=F)
     results[[name]] <- sapply(results[[name]], 
         function(res) res$pval)
 }
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above meassage appeared 66 times here


4.
# change to use alternative GO terms
> associated.genes <- xx[["GO:0006974"]]
> associations <- sapply(networks, function(g)
+     as.numeric(V(g)$name %in% associated.genes),
+     simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...


5.
> networks <- sapply(network.names, function(name)
+     set.vertex.attribute(networks[[name]], "rdds",
+     value=associations[[name]]), simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...


6.
> results <- sapply(networks, function(g) Knet(g, nperm=1000, 
     dist.method="shortest.paths", vertex.attr="rdds", 
     edge.attr="distance"), simplify=F)

This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...


7.
# obtain GO term associations
> library(org.Sc.sgd.db)
> xx <- as.list(org.Sc.sgdGO2ALLORFS)
> associated.genes <- xx[["GO:0000725"]]
> associations <- sapply(networks, function(g)
+     as.numeric(V(g)$name %in% associated.genes),
+     simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...


8.
> networks <- sapply(network.names, function(name)
+     set.vertex.attribute(networks[[name]], "dsbr",
+     value=associations[[name]]), simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...


9.
> p.values <- sapply(networks, function(g)
       Knet(g, nperm=1000, dist.method="shortest.paths",
       vertex.attr="dsbr", edge.attr="distance")$pval)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...

(where are these graphs? They're not displayed)



10.
Package msm could not be installed, this is a part of message that appeared during installation:
ERROR: compilation failed for package ‘expm’
* removing ‘/tgac/software/testing/R/3.2.2/x86_64/lib64/R/library/expm’
ERROR: dependency ‘expm’ is not available for package ‘msm’
* removing ‘/tgac/software/testing/R/3.2.2/x86_64/lib64/R/library/msm’

The downloaded source packages are in
        ‘/tmp/RtmptCI36Y/downloaded_packages’
Updating HTML index of packages in '.Library'
Making 'packages.html' ... done
Warning messages:
1: In install.packages("msm") :
  installation of package ‘expm’ had non-zero exit status
2: In install.packages("msm") :
  installation of package ‘msm’ had non-zero exit status

I've tried to install expm package because I thought it would help (see error above) but package expm also could not be installed. 








