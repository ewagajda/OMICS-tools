i) Knet successfully identifies clustering on simulated networks

# generate the simulated network
> library(SANTA)
Loading required package: igraph
Attaching package: ‘igraph’
The following objects are masked from ‘package:stats’:
    decompose, spectrum
The following object is masked from ‘package:base’:
    union

> require(igraph)
> set.seed(1) # for reproducibility
> g <- barabasi.game(n=500, power=1, m=1, directed=F)

# measure the distance between pairs of vertices in g
> dist.method <- "shortest.paths"
> D <- DistGraph(g, dist.method=dist.method, verbose=F)

# place the distances into discreet bins
B <- BinGraph(D, verbose=F)

> cluster.size <- 5
> s.to.use <- c(10, 20, 50, 100, 500)
> n.trials <- 10
> pvalues <- array(0, dim=c(n.trials, length(s.to.use)),
+     dimnames=list(NULL, as.character(s.to.use)))

# run the trials for each value of s
> for (s in s.to.use) {
+     for (i in 1:n.trials) {
+         # generate the hit set
+         seed.vertex <- sample(vcount(g), 1) # identify seed
+         sample.set <- order(D[seed.vertex, ])[1:s]
+         hit.set <- sample(sample.set, cluster.size)
+
+         # measure the stength of association
+         g <- set.vertex.attribute(g, name="hits",
+             value=as.numeric(1:vcount(g) %in% hit.set))
+         pvalues[i, as.character(s)] <- Knet(g, nperm=100,
+             dist.method=dist.method, vertex.attr="hits",
+             B=B, verbose=F)$pval
+     }
+ }

> boxplot(-log10(pvalues), xlab="cutoff", ylab="-log10(p-value)")
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'

#cleanup
> rm(B, D, g)


ii) Comparing Knet to Compactness

# create the network
> n.nodes <- 12
> edges <- c(1,2, 1,3, 1,4, 2,3, 2,4, 3,4, 1,5, 5,6,
+            2,7, 7,8, 4,9, 9,10, 3,11, 11,12)
> weights1 <- weights2 <- rep(0, n.nodes)
> weights1[c(1,2)] <- 1
> weights2[c(5,6)] <- 1
> g <- graph.empty(n.nodes, directed=F)
> g <- add.edges(g, edges)
> g <- set.vertex.attribute(g, "weights1", value=weights1)
> g <- set.vertex.attribute(g, "weights2", value=weights2)

#create plot
> par(mfrow=c(1,2))
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'

#create plot (continuation)
> colors <- rep("grey", n.nodes)
> colors[which(weights1 == 1)] <- "red"
> g <- set.vertex.attribute(g, "color", value=colors)
> plot(g)
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'

> colors <- rep("grey", n.nodes)
> colors[which(weights2 == 1)] <- "red"
> g <- set.vertex.attribute(g, "color", value=colors)
> plot(g)
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'

> par(mfrow=c(1,1))
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'
> g <- remove.vertex.attribute(g, "color")

#set 1
> Knet(g, nperm=100, vertex.attr="weights1", verbose=F)$pval
[1] 0.3986885
> Compactness(g, nperm=100, vertex.attr="weights1", verbose=F)$pval
[1] 0.08767958
#set 2
> Knet(g, nperm=100, vertex.attr="weights2", verbose=F)$pval
[1] 0.002557689
> Compactness(g, nperm=100, vertex.attr="weights2", verbose=F)$pval
[1] 0.09822864


iii) Using Knet to demonstrate that correlation in GI profile produce functionally more informative networks

# load igraph objects
> data(g.costanzo.raw)
> data(g.costanzo.cor)
> networks <- list(raw=g.costanzo.raw, cor=g.costanzo.cor)
> network.names <- names(networks)
> network.genes <- V(networks$raw)$name
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
# genes identical across networks

> source("http://bioconductor.org/biocLite.R")
Bioconductor version 3.2 (BiocInstaller 1.20.1), ?biocLite for help
> biocLite("org.Sc.sgd.db")
BioC_mirror: https://bioconductor.org
Using Bioconductor 3.2 (BiocInstaller 1.20.1), R 3.2.2 (2015-08-14).
Installing package(s) ‘org.Sc.sgd.db’
trying URL 'https://bioconductor.org/packages/3.2/data/annotation/src/contrib/org.Sc.sgd.db_3.2.3.tar.gz'
Content type 'application/x-gzip' length 19355049 bytes (18.5 MB)
==================================================
downloaded 18.5 MB

* installing *source* package ‘org.Sc.sgd.db’ ...
** R
** inst
** preparing package for lazy loading
** help
*** installing help indices
** building package indices
** testing if installed package can be loaded
* DONE (org.Sc.sgd.db)

The downloaded source packages are in
        ‘/tmp/RtmptCI36Y/downloaded_packages’
Updating HTML index of packages in '.Library'
Making 'packages.html' ... done
Old packages: 'BiocCheck', 'Cairo', 'phyloseq', 'shiny', 'tidyr'
Update all/some/none? [a/s/n]: n

# obtain the GO term associations from org.Sc.sgd.db package
> library(org.Sc.sgd.db)
Loading required package: AnnotationDbi
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:
    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:igraph’:
    normalize, union
The following objects are masked from ‘package:stats’:
    IQR, mad, xtabs
The following objects are masked from ‘package:base’:
    anyDuplicated, append, as.data.frame, as.vector, cbind, colnames,
    do.call, duplicated, eval, evalq, Filter, Find, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unlist, unsplit

Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: IRanges
Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:igraph’:
    compare
Attaching package: ‘IRanges’
The following object is masked from ‘package:igraph’:
    simplify
Loading required package: DBI

> xx <- as.list(org.Sc.sgdGO2ALLORFS)
> go.terms <- c("GO:0000082", "GO:0003682", "GO:0007265",
+               "GO:0040008", "GO:0090329")

# apply the GO terms to the networks
> for (name in network.names) {
+     for (go.term in go.terms) {
+         networks[[name]] <- set.vertex.attribute(
+             networks[[name]], name=go.term,
+             value=as.numeric(network.genes %in% xx[[go.term]]))
+     }
+ }
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above message appeared 30 times here

> results <- list()
> for (name in network.names) {
	results[[name]] <- Knet(networks[[name]], nperm=1000, 
         vertex.attr=go.terms, edge.attr="distance", verbose=F)
     results[[name]] <- sapply(results[[name]], 
         function(res) res$pval)
 }
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above meassage appeared 66 times here

> p.values <- array(unlist(results), dim=c(length(go.terms), 
       length(network.names)), dimnames=list(go.terms, 
       network.names))
 p.values.ml10 <- -log10(p.values)
 axis.range <- c(0, max(p.values.ml10)) 
 plot(p.values.ml10[, "raw"], p.values.ml10[, "cor"], asp=1, 
       xlim=axis.range, ylim=axis.range, bty="l", 
       xlab="-log10 of the p-value in the raw GI network", 
       ylab="-log10 of the p-value in the correlation network", 
       main="")
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'
>  abline(0, 1, col="red")
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'


iv) Using Knet to investigate the functional rewiring of the yeast interaction network in response to MMS-treatment

# load igraph objects
> data(g.bandyopadhyay.treated)
data(g.bandyopadhyay.untreated)
networks <- list(
    treated=g.bandyopadhyay.treated, 
    untreated=g.bandyopadhyay.untreated
)
> network.names <- names(networks)

# obtain GO term associations
> library(org.Sc.sgd.db)
> xx <- as.list(org.Sc.sgdGO2ALLORFS)

# change to use alternative GO terms
> associated.genes <- xx[["GO:0006974"]]
> associations <- sapply(networks, function(g)
+     as.numeric(V(g)$name %in% associated.genes),
+     simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...

> networks <- sapply(network.names, function(name)
+     set.vertex.attribute(networks[[name]], "rdds",
+     value=associations[[name]]), simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...

> results <- sapply(networks, function(g) Knet(g, nperm=1000, 
     dist.method="shortest.paths", vertex.attr="rdds", 
     edge.attr="distance"), simplify=F)

This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above message appeared 15 times here
computing graph distance matrix... 
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
# above message appeared 18 times here
done
computing graph distance bins... done
computing the clustering of the 'rdds' weights using 1000 permutations...  done
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
# above message appeared 15 times here
computing graph distance matrix... 
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
# above message appeared 18 times here
done
computing graph distance bins... done
computing the clustering of the 'rdds' weights using 1000 permutations...  done

 > p.values <- sapply(results, function(res) res$pval)
 > p.values
     treated     untreated
7.939843e-28 5.469717e-18

> plot(results$treated)
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'
> plot(results$untreated)
Error in (function (file = ifelse(onefile, "Rplots.pdf", "Rplot%03d.pdf"),  :
  cannot open file 'Rplots.pdf'



v) Using Knet to investigate the functional rewiring of the yeast interaction network in response to UV damage

# laod igraph object
> data(g.srivas.high)
> data(g.srivas.untreated)
> networks <- list(
+     high=g.srivas.high,
+     untreated=g.srivas.untreated
+ )
> network.names <- names(networks)

# obtain GO term associations
> library(org.Sc.sgd.db)
> xx <- as.list(org.Sc.sgdGO2ALLORFS)
> associated.genes <- xx[["GO:0000725"]]
> associations <- sapply(networks, function(g)
+     as.numeric(V(g)$name %in% associated.genes),
+     simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...

> networks <- sapply(network.names, function(name)
+     set.vertex.attribute(networks[[name]], "dsbr",
+     value=associations[[name]]), simplify=F)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...

> p.values <- sapply(networks, function(g)
       Knet(g, nperm=1000, dist.method="shortest.paths",
       vertex.attr="dsbr", edge.attr="distance")$pval)
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above message appeared 15 times here
computing graph distance matrix...
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above message appeared 18 times here
done
computing graph distance bins... done
computing the clustering of the 'dsbr' weights using 1000 permutations...  done
This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above message appeared 15 times here
computing graph distance matrix... This graph was created by an old(er) igraph version.
  Call upgrade_graph() on it to use with the current igraph version
  For now we convert it on the fly...
#above message appeared 18 times here
done
computing graph distance bins... done
computing the clustering of the 'dsbr' weights using 1000 permutations...  done

> p.values
     treated    untreated
3.787088e-06 5.713970e-01

# cleanup
rm(xx, networks, g.srivas.high, g.srivas.untreated)



vi) Using Knet to identify the network most informative about cancer cell lines

# import and convert RNAi data
> data(rnai.cheung)
> rnai.cheung <- -log10(rnai.cheung)
> rnai.cheung[!is.finite(rnai.cheung)] <- max(rnai.cheung[is.finite(rnai.cheung)])
> rnai.cheung[rnai.cheung < 0] <- 0

# import and create IntAct network
> data(edgelist.intact)
> g.intact <- graph.edgelist(as.matrix(edgelist.intact),
+     directed=FALSE)

# import data and create HumanNet network
> data(edgelist.humannet)
> g.humannet <- graph.edgelist(as.matrix(edgelist.humannet)[,1:2],directed=FALSE)
> g.humannet <- set.edge.attribute(g.humannet, "distance",
+     value=edgelist.humannet$distance)
> networks <- list(intact=g.intact, humannet=g.humannet)

> network.names <- names(networks)
> network.genes <- sapply(networks, get.vertex.attribute,
+     name="name", simplify=F)
> rnai.cheung.genes <- rownames(rnai.cheung)
> cancers <- colnames(rnai.cheung)

> for (cancer in cancers) {
+     for (name in network.names) {
+         vertex.weights <-rep(NA, vcount(networks[[name]]))
+         names(vertex.weights) <- network.genes[[name]]
+         common.genes <- rnai.cheung.genes[rnai.cheung.genes
+             %in% network.genes[[name]]]
+         vertex.weights[common.genes] <- rnai.cheung[common.genes, cancer]
+         networks[[name]] <- set.vertex.attribute(networks[[name]],
+             cancer, value=vertex.weights)
+     }
+ }

> knet.res <- sapply(networks, Knet, nperm=100, 
   dist.method="shortest.paths", vertex.attr=cancers, 
   edge.attr="distance", simplify=F)
no edge attribute with name 'distance' found so all edge distances set to 1
computing graph distance matrix... done
computing graph distance bins... done
computing the clustering of the 'colon' weights (1/6) using 100 permutations...  done
computing the clustering of the 'esophagealsq' weights (2/6) using 100 permutations...  done
computing the clustering of the 'gbm' weights (3/6) using 100 permutations...  done
computing the clustering of the 'nsclc' weights (4/6) using 100 permutations...  done
computing the clustering of the 'ovarian' weights (5/6) using 100 permutations...  done
computing the clustering of the 'pancreas' weights (6/6) using 100 permutations...  done
computing graph distance matrix... done
computing graph distance bins... done
computing the clustering of the 'colon' weights (1/6) using 100 permutations...  done
computing the clustering of the 'esophagealsq' weights (2/6) using 100 permutations...  done
computing the clustering of the 'gbm' weights (3/6) using 100 permutations...  done
computing the clustering of the 'nsclc' weights (4/6) using 100 permutations...  done
computing the clustering of the 'ovarian' weights (5/6) using 100 permutations...  done
computing the clustering of the 'pancreas' weights (6/6) using 100 permutations...  done

> p.values <- sapply(knet.res, function(i) sapply(i, 
   function(j) j$pval))
                   intact     humannet
colon        7.077838e-05 5.846780e-07
esophagealsq 9.308079e-01 7.262874e-01
gbm          9.081001e-01 9.955152e-01
nsclc        6.454286e-03 1.632314e-01
ovarian      2.202287e-04 1.926973e-08
pancreas     7.219934e-01 3.669059e-02



vii) Comparison of Knode and BioNet using simulated data
> source("http://bioconductor.org/biocLite.R")
> biocLite("RBGL") #package needed for BioNet instalation
> biocLite("BioNet")

> library(BioNet)
Loading required package: graph

Attaching package: ‘graph’

The following objects are masked from ‘package:igraph’:
    degree, edges, intersection
Loading required package: RBGL
Attaching package: ‘RBGL’
The following objects are masked from ‘package:igraph’:
    bfs, dfs, transitivity

# # required parameters
> n.nodes <- 1000
> n.hits <- 10
> clusters <- 3

# # create network and spread hits across 3 clusters
> g <- barabasi.game(n=n.nodes, power=1, m=1, directed=FALSE) 
> g <- SpreadHits(g, h=n.hits, clusters=clusters, distance.cutoff=12, lambda=10, dist.method="shortest.paths", verbose=FALSE)

> install.packages("msm")
--- Please select a CRAN mirror for use in this session ---
HTTPS CRAN mirror

 1: 0-Cloud [https]                2: Austria [https]
 3: Chile [https]                  4: China (Beijing 4) [https]
 5: Colombia (Cali) [https]        6: France (Lyon 2) [https]
 7: France (Paris 2) [https]       8: Germany (Münster) [https]
 9: Iceland [https]               10: Italy (Padua) [https]
11: Japan (Tokyo) [https]         12: Mexico (Mexico City) [https]
13: New Zealand [https]           14: Russia (Moscow) [https]
15: Spain (A Coru?a) [https]      16: Spain (Madrid) [https]
17: Switzerland [https]           18: UK (Bristol) [https]
19: UK (Cambridge) [https]        20: USA (CA 1) [https]
21: USA (KS) [https]              22: USA (MI 1) [https]
23: USA (TN) [https]              24: USA (TX) [https]
25: USA (WA) [https]              26: (HTTP mirrors)


Selection: 26
HTTP CRAN mirror

 1: 0-Cloud                       2: Algeria
 3: Argentina (La Plata)          4: Australia (Canberra)
 5: Australia (Melbourne)         6: Austria
 7: Belgium (Antwerp)             8: Belgium (Ghent)
 9: Brazil (BA)                  10: Brazil (PR)
11: Brazil (RJ)                  12: Brazil (SP 1)
13: Brazil (SP 2)                14: Canada (BC)
15: Canada (NS)                  16: Canada (ON)
17: Chile                        18: China (Beijing 2)
19: China (Beijing 3)            20: China (Beijing 4)
21: China (Xiamen)               22: Colombia (Cali)
23: Czech Republic               24: Ecuador
25: El Salvador                  26: Estonia
27: France (Lyon 1)              28: France (Lyon 2)
29: France (Marseille)           30: France (Montpellier)
31: France (Paris 1)             32: France (Paris 2)
33: Germany (Berlin)             34: Germany (Göttingen)
35: Germany (Münster)            36: Greece
37: Hungary                      38: Iceland
39: India                        40: Indonesia (Jakarta)
41: Iran                         42: Ireland
43: Italy (Milano)               44: Italy (Padua)
45: Italy (Palermo)              46: Japan (Tokyo)
47: Japan (Yamagata)             48: Korea (Seoul 1)
49: Korea (Seoul 2)              50: Korea (Ulsan)
51: Lebanon                      52: Mexico (Mexico City)
53: Mexico (Texcoco)             54: Mexico (Queretaro)
55: Netherlands (Amsterdam)      56: Netherlands (Utrecht)
57: New Zealand                  58: Norway
59: Philippines                  60: Poland
61: Portugal (Lisbon)            62: Russia (Moscow)
63: Singapore                    64: Slovakia
65: South Africa (Cape Town)     66: South Africa (Johannesburg)
67: Spain (A Coru?a)             68: Spain (Madrid)
69: Sweden                       70: Switzerland
71: Taiwan (Chungli)             72: Taiwan (Taipei)
73: Thailand                     74: Turkey (Denizli)
75: Turkey (Mersin)              76: UK (Bristol)
77: UK (Cambridge)               78: UK (London 1)
79: UK (London 2)                80: UK (St Andrews)
81: USA (CA 1)                   82: USA (CA 2)
83: USA (IA)                     84: USA (IN)
85: USA (KS)                     86: USA (MI 1)
87: USA (MI 2)                   88: USA (MO)
89: USA (NC)                     90: USA (OH 1)
91: USA (OH 2)                   92: USA (OR)
93: USA (PA 1)                   94: USA (PA 2)
95: USA (TN)                     96: USA (TX)
97: USA (WA)                     98: Venezuela


Selection: 76
also installing the dependency ‘expm’

trying URL 'http://www.stats.bris.ac.uk/R/src/contrib/expm_0.999-0.tar.gz'
Content type 'application/x-gzip' length 135405 bytes (132 KB)
==================================================
downloaded 132 KB

trying URL 'http://www.stats.bris.ac.uk/R/src/contrib/msm_1.6.tar.gz'
Content type 'application/x-gzip' length 807556 bytes (788 KB)
==================================================
downloaded 788 KB

* installing *source* package ‘expm’ ...
** package ‘expm’ successfully unpacked and MD5 sums checked
** libs
gcc -std=gnu99 -I/tgac/software/testing/R/3.2.2/x86_64/lib64/R/include -DNDEBUG  -I/tgac/software/testing/libraries/libcurl/7.32.0/x86_64/include -I/tgac/software/testing/bin/core/../..//hpccore/5/x86_64/include     -fpic  -g -O2  -c R_dgebal.c -o R_dgebal.o
R_dgebal.c: In function ‘ebal_type’:
R_dgebal.c:11: error: ‘LC_MESSAGES’ undeclared (first use in this function)
R_dgebal.c:11: error: (Each undeclared identifier is reported only once
R_dgebal.c:11: error: for each function it appears in.)
R_dgebal.c: In function ‘R_dgebal’:
R_dgebal.c:28: error: ‘LC_MESSAGES’ undeclared (first use in this function)
make: *** [R_dgebal.o] Error 1
ERROR: compilation failed for package ‘expm’
* removing ‘/tgac/software/testing/R/3.2.2/x86_64/lib64/R/library/expm’
ERROR: dependency ‘expm’ is not available for package ‘msm’
* removing ‘/tgac/software/testing/R/3.2.2/x86_64/lib64/R/library/msm’

The downloaded source packages are in
        ‘/tmp/RtmptCI36Y/downloaded_packages’
Updating HTML index of packages in '.Library'
Making 'packages.html' ... done
Warning messages:
1: In install.packages("msm") :
  installation of package ‘expm’ had non-zero exit status
2: In install.packages("msm") :
  installation of package ‘msm’ had non-zero exit status
#NOT DONE BECAUSE PACKAGE "MSM" COULDN'T INSTALL!!!



viii) Comparison of Knode and BioNet using real data

biocLite("DLBCL")
# # load required package
> library(SANTA)
> library(BioNet)
> library(DLBCL)
> data(exprLym) 
> data(dataLym) 
> data(interactome) 

# # extract entrez IDs
> library(stringr)

# # aggregate p-values
> pvals <- cbind(dataLym$t.pval, dataLym$s.pval)
> pval <- aggrPvals(pvals, order=2, plot=F)
> names(pval) <- dataLym$label

# # derive Lymphochip-specific network
> network <- subNetwork(featureNames(exprLym), interactome)
> network <- largestComp(network) # use only the largest component
> network <- igraph.from.graphNEL(network, name=T, weight=T) 
> network <- simplify(network)

# # run BioNet on the Lymphochip-specific network and aggregate p-values
> fb <- fitBumModel(pval, plot=F)
> scores <- scoreNodes(network, fb, fdr=0.001)
> module <- runFastHeinz(network, scores)
> extract.entrez <- function(x) str_extract(str_extract(x, 
 "[(][0-9]+"), "[0-9]+")
> bionet.genes <- extract.entrez(V(module)$name)

# # convert p-values to vertex weights
vertex.weights <- -log10(pval)[get.vertex.attribute(network, 
   "name")]
network <- set.vertex.attribute(network, name="pheno", 
   value=vertex.weights)
 
# # run Knode on the Lymphochip-specific network and 
# # converted aggregate p-values
knode.results <- Knode(network, dist.method="diffusion", 
     vertex.attr="pheno", verbose=F)
knode.genes <- extract.entrez(names(knode.results)[1:vcount(module)])

> data(go.entrez)
> sum(go.entrez %in% bionet.genes)
[1] 12
> sum(go.entrez %in% knode.genes)
[1] 17


> sessionInfo()
R version 3.2.2 (2015-08-14)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: CentOS release 6.7 (Final)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats4    parallel  stats     graphics  grDevices utils     datasets
[8] methods   base

other attached packages:
 [1] org.Sc.sgd.db_3.2.3  RSQLite_1.0.0        DBI_0.3.1
 [4] AnnotationDbi_1.32.3 IRanges_2.4.7        S4Vectors_0.8.11
 [7] stringr_1.0.0        DLBCL_1.10.0         Biobase_2.30.0
[10] BiocGenerics_0.16.1  BioNet_1.30.0        RBGL_1.46.0
[13] graph_1.48.0         SANTA_2.8.0          igraph_1.0.1

loaded via a namespace (and not attached):
[1] lattice_0.20-33 snow_0.4-1      grid_3.2.2      magrittr_1.5
[5] stringi_1.0-1   Matrix_1.2-3    tools_3.2.2
